class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """

        non_zero_ptr = 0

        for i in range(len(nums)):
            if nums[i] != 0:            
                nums[non_zero_ptr] = nums[i]            
                non_zero_ptr += 1
    
        for i in range(non_zero_ptr, len(nums)):
            nums[i] = 0


        #failed try but the output can be possible with this kind of pattern also

        # for num in nums:
        #     if num == 0:
        #         zeros.append(num)
        #     else:
        #         non_zeros.append(num)

        # non_zeros.extend(zeros)
        # # final = []

        # # for item in zeros:
        # #     non_zeros.append(item)
        
        # # print(non_zeros)
        # # return non_zeros


#============================================================================================
#Question



# 283. Move Zeroes

# Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

# Note that you must do this in-place without making a copy of the array.

 

# Example 1:

# Input: nums = [0,1,0,3,12]
# Output: [1,3,12,0,0]
# Example 2:

# Input: nums = [0]
# Output: [0]
 

# Constraints:

# 1 <= nums.length <= 104
# -231 <= nums[i] <= 231 - 1
