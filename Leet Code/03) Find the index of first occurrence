class Solution(object):
    def strStr(self, haystack, needle):
        """
        :type haystack: str
        :type needle: str
        :rtype: int
        """
        # length_of_haystack = len(haystack)
        # length_of_needle = len(needle)

        # if length_of_haystack == length_of_needle:
        #     range_lim = 1        
        # else:
        #     range_lim = (length_of_haystack - length_of_needle)

        # output = -1
        
        # for i in range(range_lim):
        #     word_req = haystack[i:length_of_needle+i]
        #     if word_req == needle:
        #         output = i
        
        # return output


        if needle in haystack:
            return haystack.index(needle)
        else:
            return -1



#===============================================================================================
#Question 

Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 

# Example 1:

# Input: haystack = "sadbutsad", needle = "sad"
# Output: 0
# Explanation: "sad" occurs at index 0 and 6.
# The first occurrence is at index 0, so we return 0.
# Example 2:

# Input: haystack = "leetcode", needle = "leeto"
# Output: -1
# Explanation: "leeto" did not occur in "leetcode", so we return -1.
 

# Constraints:

# 1 <= haystack.length, needle.length <= 104
# haystack and needle consist of only lowercase English characters.
