# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """

        prev = None
        present = head
        while present:
            next_node = present.next
            present.next = prev
            prev = present
            present = next_node
        return prev

    # Create linked list
    def createLinkedList(arr):
        if not arr:
            return None
        head = ListNode(arr[0])
        present = head
        for val in arr[1:]:
            present.next = ListNode(val)
            present = present.next
        return head

    # Print linked list
    def printLinkedList(head):
        present = head
        while present:
            print(present.val)
            present = present.next
        print("None")


#===============================================================
#Question


# 206. Reverse Linked List

# Given the head of a singly linked list, reverse the list, and return the reversed list.

 

# Example 1:


# Input: head = [1,2,3,4,5]
# Output: [5,4,3,2,1]
# Example 2:


# Input: head = [1,2]
# Output: [2,1]
# Example 3:

# Input: head = []
# Output: []
 

# Constraints:

# The number of nodes in the list is the range [0, 5000].
# -5000 <= Node.val <= 5000
